<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.com.code.im.mapper.UserMapper">

    <insert id="insertUser" parameterType="User">
        insert into user (
        <trim suffixOverrides=",">
            <if test="id != null">id,</if>
            <if test="userName != null">userName,</if>
            <if test="password != null">password,</if>
            <if test="email != null">email,</if>
            <if test="auth != null">auth,</if>
        </trim>
        ) values (
        <trim suffixOverrides=",">
            <if test="id != null">#{id},</if>
            <if test="userName != null">#{userName},</if>
            <if test="password != null">#{password},</if>
            <if test="email != null">#{email},</if>
            <if test="auth != null">#{auth},</if>
        </trim>
        )
    </insert>


    <select id="selectUserById" resultType="User">
        select id,userName,email,avatar,bio,createdAt,updatedAt from user where id = #{id}
    </select>

    <select id="getAuth" resultType="String">
        select auth from user where id = #{id}
    </select>

    <select id="selectUserIdByName" resultType="Long">
        select id from user where userName = #{userName}
    </select>

    <update id="updateUser" parameterType="map">
        update user
        <set>
            <if test="userName != null">userName = #{userName},</if>
            <if test="password != null">password = #{password},</if>
            <if test="email != null">email = #{email},</if>
            <if test="avatar != null">avatar = #{avatar},</if>
            <if test="bio != null">bio = #{bio},</if>
        </set>
        where id = #{id}
    </update>

    <select id="findUserByName" resultType="User">
        select userName,password,auth from user where userName = #{userName}
    </select>

    <select id="selectUserNameById" resultType="String">
        select userName from user where id = #{id}
    </select>

    <select id="queryUserNameByManyIds" resultType="String">
        select userName from user where id in
        <foreach collection="list" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>

    <select id="selectAvatarById" resultType="String">
        select avatar from user where id = #{id}
    </select>

    <select id="selectNameAndAvatarByIds" resultType="userNameAndAvatar">
        select userName,avatar from user where id in
        <foreach collection="list" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>

    <select id="queryUserListByManyIds" resultType="UserFollowing">
        select
        u.id,u.userName,u.avatar,p.sessionId
        from user u inner join private_members p
        on
        (u.id = p.userId1 and p.userId2 = #{userId})
        or (u.id = p.userId2 and p.userId1 = #{userId})
        where
        u.id in
        <foreach collection="friendIdList" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>
</mapper>
